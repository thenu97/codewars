  var_total = 0
  for x in range(number):
      if (x % 3 == 0 or x % 5 == 0):
          var_total == var_total + x
      else:
          pass
      return var_total


def to_jaden_case(string):
    return ' '.join(s[:1].upper() + s[1:] for s in string.split(' '))


def create_phone_number(n):
    f = "".join(map(str, n[0:3]) )
    s = "".join(map(str, n[3:6]) )
    t = "".join(map(str, n[6:10]) )
    return "(" + f + ") " + s + "-" + t 


def rgb(r, g, b):
    r, g, b = map(lambda x: 0 if x < 0 else 255 if x > 255 else x, [r, g, b])
    return "%s%s%s" % (format(r, "02X"), format(g, "02X"), format(b, "02X"))
    
    pass


def disemvowel(string):
    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
    for x in string:
        if x in vowels:
            string = string.replace(x, "")
    return string


jenkins connects to prod through ssh but password required.
but end user is unable to push this this so we are asked for a identity file
-i = identity file = private key = with identity file you need to porvide where the abs file is 

generate private and public key = ssh-keygen (command)
by default goes to home root ( ~/.ssh/ )
public keys have (.pub) at the end of it

public key in prod
private key in jenkins




SELECT 
FROM Personal, Results #name of tables (when multiple tables exist) 
# 


SELECT Personal.RegNo, Personal.Name, Results.Subject, Results.Marks
FROM Personal, Results
WHERE Personal.RegNo = Result.RegNo # tables where they're both equal


SELECT Personal.RegNo, Personal.Name, Results.Subject, Results.Marks
FROM Personal, Results
WHERE Personal.RegNo = Result.RegNo and Personal.RegNo = 1 # where both = 1

immutable data only 

CREATE Index PIndex on Personalinfo(RegNo) #PIndex = name of index, Personalinfo = table name, RegNo = column name 
A table of index will be formed in order of RegNo 


CREATE TABLE school(
	RegNo int UNIQUE,
	SUBJECT varchar(20) check(SUBJECT = "JAVA" OR SUBJECT = "DEVOPS" OR SUBJECT = "PYTHON")
	Marks int check(marks >= 0 and marks <= 150)

#check = constraint 




















r




import random
rock_c = 0
paper_c = 0
scissor_c = 0

play_game = str(input("Do you want to play rock, paper, scissors?: "))
while play_game = 'y'
	choices = ['rock', 'paper', 'scissors']
	player_choice = input("rock, paper or scissors": )
	comp_choice = random.choice(choices)
	
	if player_choice == 'rock':
		if comp_choice == 'rock':
			print("It's a draw! - both rock")
		elif comp_choice == 'paper':
			print("You lose", comp_choice, player_choice)
		else:
			print("You win", comp_choice, player_choice)
		rock_c = rock_c + 1

	if player_choice == 'paper':
		if comp_choice == 'paper':
			print("It's a draw! - both paper")
		elif comp_choice == 'rock':
			print("You win", comp_choice, player_choice)
		else:
			print("You lose", comp_choice, player_choice)
		paper_c = paper_c + 1
	
	if player_choice == 'scissors'
		if comp_choice == 'scissors':	
			print("It's a draw! - both scissors")
		elif comp_choice == 'paper':
			print("You win", comp_choice, player_choice)
		else:
			print("You lose", comp_choice, player_choice)	
		scissor_c = scissor_c + 1

count = rock_c + paper_c + scissor_c
avg(r) = rock_c / count
avg(p) = paper_c / count
avg(s) = scissor_c / count

if avg(r) > (avg(p) and avg(s))
	comp_choice = 'paper'
if avg(p) > (avg(s) and avg(r))
	comp_choice = 'scissors'
if avg(s) > (avg(r) and avg(p))
	comp_choice = 'rock'



def move_zeros(array):
    first = []
    second = []
    for i in array:
        if type(i) == int and i == 0:
            second.append(i)
        elif type(i) == float and i == 0.0:
            second.append(i)
        else:
            first.append(i)
    return first + second






STRING SPLIT
#!/usr/bin/env python3.8

#def soluton(string, markers):

s= "asdfghjkl"
w="werljrgnmbnlkalvnkfblsdl"
def solution(s):
    if len(s) % 2 == 0:
        l = [s[i:i+2] for i in range(0, len(s), 2)]
    if len(s) % 2 == 1:
        l = [s[i:i+2] for i in range(0, len(s) - 1, 2)]
        l2 = s[-1] + "_"
        print(l2)
        #l3 = str(l2)
        l.append(l2)
    return l
print(solution(s))
print(solution(w))


s1 = "123456"

print(s1[-1] + "_")

    



GROWTH OF POPULATION
import math
def nb_year(p0, percent, aug, p):
    n = 1
    while n >= 0:
        incre = percent / 100
        p_i = int(p0 + p0*incre + aug)
        print(p_i)
        if p_i >= p:
            break
        else:
            n = n + 1
            p0 = p_i
    return n
        


